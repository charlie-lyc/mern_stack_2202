{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport res from 'express/lib/response';\nimport { fetchAll, create, update, destroy } from './goalsAPI';\nconst goals = JSON.parse(localStorage.getItem('goals'));\nconst initialState = {\n  items: goals ? goals : [],\n  item: null,\n  message: '',\n  isLoading: false,\n  isSuccess: false,\n  isError: false\n};\nexport const fetchAllGoals = createAsyncThunk('goals/fetchAllGoals', async (token, thunkAPI) => {\n  try {\n    const res = await fetchAll(token);\n    localStorage.setItem('goals', JSON.stringify(res.data));\n    return res.data;\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // export const createGoal = createAsyncThunk(\n//     'goals/createGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n// export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n\nexport const goalsSlice = createSlice({\n  name: 'goals',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.message = '';\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n    }\n  },\n  extraReducers: build => {}\n});\nexport const {\n  reset\n} = goalsSlice.actions;\nexport const selectGoalsState = state => state.goals;\nexport default goalsSlice.reducer;","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/features/goals/goalsSlice.js"],"names":["createAsyncThunk","createSlice","res","fetchAll","create","update","destroy","goals","JSON","parse","localStorage","getItem","initialState","items","item","message","isLoading","isSuccess","isError","fetchAllGoals","token","thunkAPI","setItem","stringify","data","error","response","toString","rejectWithValue","goalsSlice","name","reducers","reset","state","extraReducers","build","actions","selectGoalsState","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmCC,OAAnC,QAAkD,YAAlD;AAGA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAEN,KAAK,GAAGA,KAAH,GAAW,EADN;AAEjBO,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,EAHQ;AAIjBC,EAAAA,SAAS,EAAE,KAJM;AAKjBC,EAAAA,SAAS,EAAE,KALM;AAMjBC,EAAAA,OAAO,EAAE;AANQ,CAArB;AASA,OAAO,MAAMC,aAAa,GAAGnB,gBAAgB,CACzC,qBADyC,EAEzC,OAAOoB,KAAP,EAAcC,QAAd,KAA2B;AACvB,MAAI;AACA,UAAMnB,GAAG,GAAG,MAAMC,QAAQ,CAACiB,KAAD,CAA1B;AACAV,IAAAA,YAAY,CAACY,OAAb,CAAqB,OAArB,EAA8Bd,IAAI,CAACe,SAAL,CAAerB,GAAG,CAACsB,IAAnB,CAA9B;AACA,WAAOtB,GAAG,CAACsB,IAAX;AACH,GAJD,CAIE,OAAOC,KAAP,EAAc;AACZ,UAAMV,OAAO,GAAGU,KAAK,CAACC,QAAN,CAAeF,IAAf,CAAoBT,OAApB,IAA+BU,KAAK,CAACV,OAArC,IAAgDU,KAAK,CAACE,QAAN,EAAhE;AACA,WAAON,QAAQ,CAACO,eAAT,CAAyBb,OAAzB,CAAP;AACH;AACJ,CAXwC,CAAtC,C,CAcP;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAIA,OAAO,MAAMc,UAAU,GAAG5B,WAAW,CAAC;AAClC6B,EAAAA,IAAI,EAAE,OAD4B;AAElClB,EAAAA,YAFkC;AAGlCmB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAEC,KAAK,IAAI;AACZA,MAAAA,KAAK,CAAClB,OAAN,GAAgB,EAAhB;AACAkB,MAAAA,KAAK,CAACjB,SAAN,GAAkB,KAAlB;AACAiB,MAAAA,KAAK,CAAChB,SAAN,GAAkB,KAAlB;AACAgB,MAAAA,KAAK,CAACf,OAAN,GAAgB,KAAhB;AACH;AANK,GAHwB;AAWlCgB,EAAAA,aAAa,EAAEC,KAAK,IAAI,CAEvB;AAbiC,CAAD,CAA9B;AAgBP,OAAO,MAAM;AAAEH,EAAAA;AAAF,IAAYH,UAAU,CAACO,OAA7B;AAEP,OAAO,MAAMC,gBAAgB,GAAGJ,KAAK,IAAIA,KAAK,CAAC1B,KAAxC;AAEP,eAAesB,UAAU,CAACS,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport res from 'express/lib/response'\nimport { fetchAll, create, update, destroy } from './goalsAPI'\n\n\nconst goals = JSON.parse(localStorage.getItem('goals'))\n\nconst initialState = {\n    items: goals ? goals : [],\n    item: null,\n    message: '',\n    isLoading: false,\n    isSuccess: false,\n    isError: false\n}\n\nexport const fetchAllGoals = createAsyncThunk(\n    'goals/fetchAllGoals',\n    async (token, thunkAPI) => {\n        try {\n            const res = await fetchAll(token)\n            localStorage.setItem('goals', JSON.stringify(res.data))\n            return res.data\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\n// export const createGoal = createAsyncThunk(\n//     'goals/createGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\n// export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\n\n\nexport const goalsSlice = createSlice({\n    name: 'goals',\n    initialState,\n    reducers: {\n        reset: state => {\n            state.message = ''\n            state.isLoading = false\n            state.isSuccess = false \n            state.isError = false\n        }\n    },\n    extraReducers: build => {\n\n    }\n})\n\nexport const { reset } = goalsSlice.actions\n\nexport const selectGoalsState = state => state.goals\n\nexport default goalsSlice.reducer"]},"metadata":{},"sourceType":"module"}