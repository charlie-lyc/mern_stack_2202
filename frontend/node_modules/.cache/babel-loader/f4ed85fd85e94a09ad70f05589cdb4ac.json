{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchAll, create // update, \n// destroy \n} from './goalsAPI';\nconst goals = JSON.parse(localStorage.getItem('goals'));\nconst initialState = {\n  items: goals ? goals : [],\n  item: null,\n  message: '',\n  isLoading: false,\n  isSuccess: false,\n  isError: false\n};\nexport const fetchAllGoals = createAsyncThunk('goals/fetchAllGoals', async (token, thunkAPI) => {\n  try {\n    const res = await fetchAll(token);\n    localStorage.setItem('goals', JSON.stringify(res.data));\n    return res.data;\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const createGoal = createAsyncThunk('goals/createGoal', async (_ref, thunkAPI) => {\n  let {\n    goalData,\n    token\n  } = _ref;\n\n  try {} catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n\nexport const goalsSlice = createSlice({\n  name: 'goals',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.message = '';\n      state.isLoading = false;\n      state.isSuccess = false;\n      state.isError = false;\n    }\n  },\n  extraReducers: build => {\n    build.addCase(fetchAllGoals.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchAllGoals.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.items = action.payload;\n    }).addCase(fetchAllGoals.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = goalsSlice.actions;\nexport const selectGoalsState = state => state.goals;\nexport default goalsSlice.reducer;","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/features/goals/goalsSlice.js"],"names":["createAsyncThunk","createSlice","fetchAll","create","goals","JSON","parse","localStorage","getItem","initialState","items","item","message","isLoading","isSuccess","isError","fetchAllGoals","token","thunkAPI","res","setItem","stringify","data","error","response","toString","rejectWithValue","createGoal","goalData","goalsSlice","name","reducers","reset","state","extraReducers","build","addCase","pending","fulfilled","action","payload","rejected","actions","selectGoalsState","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { fetchAll, create, \n    // update, \n    // destroy \n} from './goalsAPI'\n\n\nconst goals = JSON.parse(localStorage.getItem('goals'))\n\nconst initialState = {\n    items: goals ? goals : [],\n    item: null,\n    message: '',\n    isLoading: false,\n    isSuccess: false,\n    isError: false\n}\n\nexport const fetchAllGoals = createAsyncThunk(\n    'goals/fetchAllGoals',\n    async (token, thunkAPI) => {\n        try {\n            const res = await fetchAll(token)\n            localStorage.setItem('goals', JSON.stringify(res.data))\n            return res.data\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\nexport const createGoal = createAsyncThunk(\n    'goals/createGoal',\n    async ({ goalData, token }, thunkAPI) => {\n        try {\n            \n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\n// export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\nexport const goalsSlice = createSlice({\n    name: 'goals',\n    initialState,\n    reducers: {\n        reset: state => {\n            state.message = ''\n            state.isLoading = false\n            state.isSuccess = false \n            state.isError = false\n        }\n    },\n    extraReducers: build => {\n        build.addCase(fetchAllGoals.pending, state => {\n                state.isLoading = true\n            }).addCase(fetchAllGoals.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.items = action.payload\n            }).addCase(fetchAllGoals.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n    }\n})\n\nexport const { reset } = goalsSlice.actions\n\nexport const selectGoalsState = state => state.goals\n\nexport default goalsSlice.reducer"]},"metadata":{},"sourceType":"module"}