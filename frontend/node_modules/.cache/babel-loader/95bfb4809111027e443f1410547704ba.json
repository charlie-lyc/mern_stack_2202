{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetch, create // update, \n// destroy \n} from './goalsAPI';\nconst initialState = {\n  items: [],\n  message: '',\n  isLoading: false,\n  isSuccess: false,\n  isError: false\n};\nexport const fetchGoals = createAsyncThunk('goals/fetchGoals', async (token, thunkAPI) => {\n  try {\n    const res = await fetch(token);\n    return res.data.reverse();\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // export const createGoal = createAsyncThunk(\n//     'goals/createGoal',\n//     async ({ goalData, token }, thunkAPI) => {\n//         try {\n//             const res = await create(goalData, token)\n//             return res.data\n//         } catch (error) {\n//             const message = error.response.data.message || error.message || error.toString()\n//             return thunkAPI.rejectWithValue(message)\n//         }\n//     }\n// )\n/////////////////////////////////////////////////////////////////\n\nexport const createGoal = createAsyncThunk('goals/createGoal', async (goalData, thunkAPI) => {\n  try {\n    // const userToken = JSON.parse(localStorage.getItem('user')).token\n    ///////////////////////////////////////////////////////////////////\n    const userToken = thunkAPI.getState().auth.user.token;\n    const res = await create(goalData, userToken);\n    return res.data;\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n//         } catch (error) {\n//         }\n//     }\n// )\n\nexport const goalsSlice = createSlice({\n  name: 'goals',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: build => {\n    build.addCase(fetchGoals.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchGoals.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.items = action.payload;\n    }).addCase(fetchGoals.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n    build.addCase(createGoal.pending, state => {\n      state.isLoading = true;\n    }).addCase(createGoal.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true; // state.items.unshift(action.payload)\n      ////////////////////////////////////////////////\n\n      state.items = [action.payload, ...state.items];\n    }).addCase(createGoal.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = goalsSlice.actions;\nexport const selectGoals = state => state.goals;\nexport default goalsSlice.reducer;","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/features/goals/goalsSlice.js"],"names":["createAsyncThunk","createSlice","fetch","create","initialState","items","message","isLoading","isSuccess","isError","fetchGoals","token","thunkAPI","res","data","reverse","error","response","toString","rejectWithValue","createGoal","goalData","userToken","getState","auth","user","goalsSlice","name","reducers","reset","state","extraReducers","build","addCase","pending","fulfilled","action","payload","rejected","actions","selectGoals","goals","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { fetch, create, \n    // update, \n    // destroy \n} from './goalsAPI'\n\n\nconst initialState = {\n    items: [],\n    message: '',\n    isLoading: false,\n    isSuccess: false,\n    isError: false\n}\n\nexport const fetchGoals = createAsyncThunk(\n    'goals/fetchGoals',\n    async (token, thunkAPI) => {\n        try {\n            const res = await fetch(token)\n            return res.data.reverse()\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\n// export const createGoal = createAsyncThunk(\n//     'goals/createGoal',\n//     async ({ goalData, token }, thunkAPI) => {\n//         try {\n//             const res = await create(goalData, token)\n//             return res.data\n//         } catch (error) {\n//             const message = error.response.data.message || error.message || error.toString()\n//             return thunkAPI.rejectWithValue(message)\n//         }\n//     }\n// )\n/////////////////////////////////////////////////////////////////\nexport const createGoal = createAsyncThunk(\n    'goals/createGoal',\n    async (goalData, thunkAPI) => {\n        try {\n\n            // const userToken = JSON.parse(localStorage.getItem('user')).token\n            ///////////////////////////////////////////////////////////////////\n            const userToken = thunkAPI.getState().auth.user.token\n\n            const res = await create(goalData, userToken)\n            return res.data\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\n// export const updateGoal = createAsyncThunk(\n//     'goals/updateGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\n// export const destroyGoal = createAsyncThunk(\n//     'goals/destroyGoal',\n//     async (goalData, thunkAPI) => {\n//         try {\n            \n//         } catch (error) {\n            \n//         }\n//     }\n// )\n\nexport const goalsSlice = createSlice({\n    name: 'goals',\n    initialState,\n    reducers: {\n        reset: state => initialState,\n    },\n    extraReducers: build => {\n        build.addCase(fetchGoals.pending, state => {\n                state.isLoading = true\n            }).addCase(fetchGoals.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                state.items = action.payload\n            }).addCase(fetchGoals.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n        build.addCase(createGoal.pending, state => {\n                state.isLoading = true\n            }).addCase(createGoal.fulfilled, (state, action) => {\n                state.isLoading = false\n                state.isSuccess = true\n                // state.items.unshift(action.payload)\n                ////////////////////////////////////////////////\n                state.items = [ action.payload, ...state.items ]\n            }).addCase(createGoal.rejected, (state, action) => {\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n    }\n})\n\nexport const { reset } = goalsSlice.actions\n\nexport const selectGoals = state => state.goals\n\nexport default goalsSlice.reducer"]},"metadata":{},"sourceType":"module"}