{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { register, login, logout } from './authAPI';\n/**\n * 'window.localStorage' is a browser feature that stores data as a <string>\n * - localStorage.setItem()\n * - localStorage.getItem()\n * - localStorage.removeItem()\n * - localStorage.clear()\n */\n\nconst user = JSON.parse(localStorage.getItem('user'));\n/*******************************************************/\n\nconst initialState = {\n  // user: user ? user : null,\n  user: null,\n  message: '',\n  // status: 'idle' || 'loading' || 'success' || 'error'\n  isLoading: false,\n  isSuccess: false,\n  isError: false\n};\nexport const registerUser = createAsyncThunk('auth/registerUser', async (userData, thunkAPI) => {\n  try {\n    const response = await register(userData); // console.log(response)\n\n    return response.data.message; // return <Payload>\n  } catch (error) {\n    // console.log(error.response.data.message)\n    // console.log(error.message)\n    // console.log(error.toString())\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const loginUser = createAsyncThunk('auth/loginUser', async (userData, thunkAPI) => {\n  try {\n    const res = await login(userData); // console.log(res)\n\n    /********************************************************/\n\n    localStorage.setItem('user', JSON.stringify(res.data));\n    /********************************************************/\n\n    return res.data; // return <Payload>\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const logoutUser = createAsyncThunk('auth/logoutUser', async (_, thunkAPI) => {\n  try {\n    const res = await logout(); // console.log(res)\n\n    /********************************************************/\n\n    localStorage.removeItem('user');\n    /* OR */\n    // localStorage.clear()\n\n    /********************************************************/\n\n    return res.data.message; // return <Payload>\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.user = null;\n      state.message = ''; // status: 'idle' || 'loading' || 'success' || 'error'\n\n      state.isError = false;\n      state.isLoading = false;\n      state.isSuccess = false;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, state => {\n      // state.status = 'loading'\n      state.isLoading = true;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      // state.status = 'success'\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = action.payload;\n    }).addCase(registerUser.rejected, (state, action) => {\n      // state.status = 'error'\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n    builder.addCase(loginUser.pending, state => {\n      // state.status = 'loading'\n      state.isLoading = true;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      // state.status = 'success'\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.user = action.payload;\n    }).addCase(loginUser.rejected, (state, action) => {\n      // state.status = 'error'\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n    builder.addCase(logoutUser.pending, state => {\n      // state.status = 'loading'\n      state.isLoading = true;\n    }).addCase(logoutUser.fulfilled, (state, action) => {\n      // state.status = 'success'\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.message = action.payload;\n    }).addCase(logoutUser.rejected, (state, action) => {\n      // state.status = 'error'\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = authSlice.actions;\nexport const selectAuth = state => state.auth;\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/features/auth/authSlice.js"],"names":["createAsyncThunk","createSlice","register","login","logout","user","JSON","parse","localStorage","getItem","initialState","message","isLoading","isSuccess","isError","registerUser","userData","thunkAPI","response","data","error","toString","rejectWithValue","loginUser","res","setItem","stringify","logoutUser","_","removeItem","authSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","selectAuth","auth","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { register, login, logout } from './authAPI'\n\n/**\n * 'window.localStorage' is a browser feature that stores data as a <string>\n * - localStorage.setItem()\n * - localStorage.getItem()\n * - localStorage.removeItem()\n * - localStorage.clear()\n */\nconst user = JSON.parse(localStorage.getItem('user'))\n/*******************************************************/\n\nconst initialState = {\n    // user: user ? user : null,\n    user: null,\n    message: '',\n    // status: 'idle' || 'loading' || 'success' || 'error'\n    isLoading: false,\n    isSuccess: false,\n    isError: false\n}\n\nexport const registerUser = createAsyncThunk(\n    'auth/registerUser',\n    async (userData, thunkAPI) => {\n        try {\n            const response = await register(userData)\n            // console.log(response)\n            return response.data.message // return <Payload>\n        } catch (error) {\n            // console.log(error.response.data.message)\n            // console.log(error.message)\n            // console.log(error.toString())\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\nexport const loginUser = createAsyncThunk(\n    'auth/loginUser',\n    async (userData, thunkAPI) => {\n        try {\n            const res = await login(userData)\n            // console.log(res)\n            /********************************************************/\n            localStorage.setItem('user', JSON.stringify(res.data))\n            /********************************************************/\n            return res.data // return <Payload>\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\nexport const logoutUser = createAsyncThunk(\n    'auth/logoutUser',\n    async (_, thunkAPI) => {\n        try {\n            const res = await logout()\n            // console.log(res)\n            /********************************************************/\n            localStorage.removeItem('user')\n            /* OR */\n            // localStorage.clear()\n            /********************************************************/\n            return res.data.message // return <Payload>\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: state => {\n            state.user = null\n            state.message = ''\n            // status: 'idle' || 'loading' || 'success' || 'error'\n            state.isError = false\n            state.isLoading = false\n            state.isSuccess = false\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(registerUser.pending, state => {\n                // state.status = 'loading'\n                state.isLoading = true\n            }).addCase(registerUser.fulfilled, (state, action) => {\n                // state.status = 'success'\n                state.isLoading = false\n                state.isSuccess = true\n                state.message = action.payload\n            }).addCase(registerUser.rejected, (state, action) => {\n                // state.status = 'error'\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n        builder.addCase(loginUser.pending, state => {\n                // state.status = 'loading'\n                state.isLoading = true\n            }).addCase(loginUser.fulfilled, (state, action) => {\n                // state.status = 'success'\n                state.isLoading = false\n                state.isSuccess = true\n                state.user = action.payload\n            }).addCase(loginUser.rejected, (state, action) => {\n                // state.status = 'error'\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n        builder.addCase(logoutUser.pending, state => {\n                // state.status = 'loading'\n                state.isLoading = true\n            }).addCase(logoutUser.fulfilled, (state, action) => {\n                // state.status = 'success'\n                state.isLoading = false\n                state.isSuccess = true\n                state.message = action.payload\n            }).addCase(logoutUser.rejected, (state, action) => {\n                // state.status = 'error'\n                state.isLoading = false\n                state.isError = true\n                state.message = action.payload\n            })\n    }\n})\n\nexport const { reset } = authSlice.actions\n\nexport const selectAuth = state => state.auth\n\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}