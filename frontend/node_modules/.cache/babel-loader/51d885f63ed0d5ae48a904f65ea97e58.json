{"ast":null,"code":"var _jsxFileName = \"/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/components/GoalItem.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { destroyGoal, updateGoal } from '../features/goals/goalsSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GoalItem = _ref => {\n  _s();\n\n  let {\n    goal\n  } = _ref;\n  const [currentGoal, setCurrentGoal] = useState({\n    text: goal.text ? goal.text : '',\n    isUpdated: false\n  });\n\n  const handleChange = e => {\n    setCurrentGoal(prevState => ({ ...prevState,\n      text: e.target.value\n    }));\n  };\n\n  const dispatch = useDispatch();\n\n  const handleDelete = () => {\n    dispatch(destroyGoal(goal._id));\n  };\n\n  const toggleUpdate = () => {\n    setCurrentGoal(prevState => ({ ...prevState,\n      isUpdated: !prevState.isUpdated\n    }));\n  };\n\n  const handleUpdate = () => {\n    dispatch(updateGoal(currentGoal.text));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"goal\",\n    children: [!currentGoal.isUpdated ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: goal.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleChange,\n        value: currentGoal.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\"\n      },\n      children: new Date(goal.createdAt).toLocaleString('en-US')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), !currentGoal.isUpdated ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rewrite\",\n        onClick: toggleUpdate,\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: \"Rewrite\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close\",\n        onClick: handleDelete,\n        style: {\n          fontWeight: \"bold\"\n        },\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"rewrite\",\n      onClick: handleUpdate,\n      style: {\n        fontWeight: \"bold\"\n      },\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GoalItem, \"Mk/+Nnz0+tbrHq9IlQoulaLmSA4=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GoalItem;\nexport default GoalItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoalItem\");","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/components/GoalItem.jsx"],"names":["useState","useDispatch","destroyGoal","updateGoal","GoalItem","goal","currentGoal","setCurrentGoal","text","isUpdated","handleChange","e","prevState","target","value","dispatch","handleDelete","_id","toggleUpdate","handleUpdate","display","Date","createdAt","toLocaleString","fontWeight"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,8BAAxC;;;;AAGA,MAAMC,QAAQ,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AAC3B,QAAM,CAAEC,WAAF,EAAeC,cAAf,IAAkCP,QAAQ,CAAC;AAC7CQ,IAAAA,IAAI,EAAEH,IAAI,CAACG,IAAL,GAAYH,IAAI,CAACG,IAAjB,GAAwB,EADe;AAE7CC,IAAAA,SAAS,EAAE;AAFkC,GAAD,CAAhD;;AAKA,QAAMC,YAAY,GAAGC,CAAC,IAAI;AACtBJ,IAAAA,cAAc,CAAEK,SAAD,KAAgB,EAC3B,GAAGA,SADwB;AAE3BJ,MAAAA,IAAI,EAAEG,CAAC,CAACE,MAAF,CAASC;AAFY,KAAhB,CAAD,CAAd;AAIH,GALD;;AAOA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;;AAEA,QAAMe,YAAY,GAAG,MAAM;AACvBD,IAAAA,QAAQ,CAACb,WAAW,CAACG,IAAI,CAACY,GAAN,CAAZ,CAAR;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACvBX,IAAAA,cAAc,CAAEK,SAAD,KAAgB,EAC3B,GAAGA,SADwB;AAE3BH,MAAAA,SAAS,EAAE,CAACG,SAAS,CAACH;AAFK,KAAhB,CAAD,CAAd;AAIH,GALD;;AAOA,QAAMU,YAAY,GAAG,MAAM;AACvBJ,IAAAA,QAAQ,CAACZ,UAAU,CAACG,WAAW,CAACE,IAAb,CAAX,CAAR;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eAEQ,CAACF,WAAW,CAACG,SAAb,gBACI;AAAA,gBAAMJ,IAAI,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,gBAGI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAGE,YAA9B;AAA6C,QAAA,KAAK,EAAGJ,WAAW,CAACE;AAAjE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALZ,eAUI;AAAK,MAAA,KAAK,EAAG;AAAEY,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA,gBAEM,IAAIC,IAAJ,CAAShB,IAAI,CAACiB,SAAd,EAAyBC,cAAzB,CAAwC,OAAxC;AAFN;AAAA;AAAA;AAAA;AAAA,YAVJ,EAeQ,CAACjB,WAAW,CAACG,SAAb,gBACI;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAGS,YAAtC;AAAqD,QAAA,KAAK,EAAG;AAAEM,UAAAA,UAAU,EAAE;AAAd,SAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,OAAO,EAAGR,YAApC;AAAmD,QAAA,KAAK,EAAG;AAAEQ,UAAAA,UAAU,EAAE;AAAd,SAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA,oBADJ,gBAUI;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAGL,YAAtC;AAAqD,MAAA,KAAK,EAAG;AAAEK,QAAAA,UAAU,EAAE;AAAd,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH,CA9DD;;GAAMpB,Q;UAaeH,W;;;KAbfG,Q;AAgEN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { destroyGoal, updateGoal } from '../features/goals/goalsSlice'\n\n\nconst GoalItem = ({ goal }) => {\n    const [ currentGoal, setCurrentGoal ] = useState({\n        text: goal.text ? goal.text : '',\n        isUpdated: false\n    })\n\n    const handleChange = e => {\n        setCurrentGoal((prevState) => ({\n            ...prevState,\n            text: e.target.value\n        }))\n    }\n\n    const dispatch = useDispatch()\n\n    const handleDelete = () => {\n        dispatch(destroyGoal(goal._id))\n    }\n\n    const toggleUpdate = () => {\n        setCurrentGoal((prevState) => ({\n            ...prevState,\n            isUpdated: !prevState.isUpdated\n        }))\n    }\n\n    const handleUpdate = () => {\n        dispatch(updateGoal(currentGoal.text))\n    }\n\n    return (\n        <div className=\"goal\">\n            {\n                !currentGoal.isUpdated ?\n                    <h3>{ goal.text }</h3> \n                :\n                    <div className='form-group'>\n                        <input type=\"text\" onChange={ handleChange } value={ currentGoal.text } />\n                    </div>\n            }\n            \n            <div style={ { display: \"inline-block\" } }>\n                {/* { new Date(goal.createdAt).toLocaleString('ko-KR') } */}\n                { new Date(goal.createdAt).toLocaleString('en-US') }\n            </div>\n            {\n                !currentGoal.isUpdated ?\n                    <>\n                        <button className='rewrite' onClick={ toggleUpdate } style={ { fontWeight: \"bold\" } }>\n                            Rewrite\n                        </button>\n                        <button className='close' onClick={ handleDelete } style={ { fontWeight: \"bold\" } }>\n                            X\n                        </button>\n                    </>\n                :\n                    <button className='rewrite' onClick={ handleUpdate } style={ { fontWeight: \"bold\" } }>\n                        Done\n                    </button>\n            }\n        </div>\n    )\n}\n\nexport default GoalItem"]},"metadata":{},"sourceType":"module"}