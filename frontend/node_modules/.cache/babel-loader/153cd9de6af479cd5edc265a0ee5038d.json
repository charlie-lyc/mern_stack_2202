{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { register, login // logout \n} from './authAPI';\n/**\n * 'window.localStorage' stores data(ex. user's token) as a <string> in browser.\n * - localStorage.setItem()\n * - localStorage.getItem()\n * - localStorage.removeItem()\n * - localStorage.clear()\n */\n// const user = JSON.parse(localStorage.getItem('user')) // ???\n\n/******************************************************/\n\nconst initialState = {\n  // user: user ? user : null,\n  user: null,\n  message: '',\n  // status: 'idle' || 'loading' || 'success' || 'error'\n  isLoading: false,\n  isSuccess: false,\n  isError: false\n};\nexport const registerUser = createAsyncThunk('auth/registerUser', async (userData, thunkAPI) => {\n  try {\n    const response = await register(userData); // console.log(response)\n\n    return response.data.message; // return <Payload>\n  } catch (error) {\n    // console.log(error.response.data.message)\n    // console.log(error.message)\n    // console.log(error.toString())\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const loginUser = createAsyncThunk('auth/loginUser', async (userData, thunkAPI) => {\n  try {\n    const res = await login(userData); // console.log(res)\n\n    /*****************************************************/\n\n    localStorage.setItem('user', JSON.stringify(res.data));\n    /*****************************************************/\n\n    return res.data; // return <Payload>\n  } catch (error) {\n    const message = error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\n/* Solution1: Failed */\n// export const logoutUser = createAsyncThunk(\n//     'auth/logoutUser',\n//     async (_, thunkAPI) => {\n//         try {\n//             const res = await logout()\n//             // console.log(res)\n//             /******************************/\n//             localStorage.removeItem('user')\n//             /* OR */\n//             // localStorage.clear()\n//             /******************************/\n//             return res.data.message // return <Payload>\n//         } catch (error) {\n//             const message = error.response.data.message || error.message || error.toString()\n//             return thunkAPI.rejectWithValue(message)\n//         }\n//     }\n// )\n///////////////////////////////////////////////\n\n/* Solution2 */\n// export const logoutUser = createAsyncThunk(\n//     'auth/logoutUser',\n//     async () => {\n//         await logout()\n//     }\n// )\n\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    reset: state => {\n      state.message = ''; // status: 'idle' || 'loading' || 'success' || 'error'\n\n      state.isError = false;\n      state.isLoading = false;\n      state.isSuccess = false;\n    },\n\n    /* Solution3 */\n    loggedOut: state => {\n      state.user = null; // !!!\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, state => {\n      // state.status = 'loading'\n      state.isLoading = true;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      state.message = action.payload; // state.status = 'success'\n\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.message = action.payload; // state.status = 'error'\n\n      state.isLoading = false;\n      state.isError = true;\n    });\n    builder.addCase(loginUser.pending, state => {\n      // state.status = 'loading'\n      state.isLoading = true;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.user = action.payload; // !!!\n      // state.status = 'success'\n\n      state.isLoading = false;\n      state.isSuccess = true;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.message = action.payload; // state.status = 'error'\n\n      state.isLoading = false;\n      state.isError = true;\n    });\n    /* Solution1: Failed */\n    // builder.addCase(logoutUser.pending, state => {\n    //         // state.status = 'loading'\n    //         state.isLoading = true\n    //     }).addCase(logoutUser.fulfilled, (state, action) => {\n    //         state.user = null // !!!\n    //         state.message = action.payload\n    //         // state.status = 'success'\n    //         state.isLoading = false\n    //         state.isSuccess = true\n    //     }).addCase(logoutUser.rejected, (state, action) => {\n    //         state.message = action.payload            \n    //         // state.status = 'error'\n    //         state.isLoading = false\n    //         state.isError = true\n    //     })\n    ///////////////////////////////////////////////////////////\n\n    /* Solution2 */\n    // builder.addCase(logoutUser.fulfilled, state => { \n    //         state.user = null // !!!\n    //     })\n  }\n});\nexport const {\n  reset,\n  loggedOut\n} = authSlice.actions;\nexport const selectAuth = state => state.auth;\n/* Solution3 */\n\nexport const logoutUser = () => dispatch => {\n  dispatch(loggedOut());\n  /******************************/\n\n  localStorage.removeItem('user');\n  /* OR */\n  // localStorage.clear()\n\n  /******************************/\n};\nexport default authSlice.reducer;","map":{"version":3,"sources":["/Users/charlie/Documents/YouTube/BradTraversy/mern_stack_2202/frontend/src/features/auth/authSlice.js"],"names":["createAsyncThunk","createSlice","register","login","initialState","user","message","isLoading","isSuccess","isError","registerUser","userData","thunkAPI","response","data","error","toString","rejectWithValue","loginUser","res","localStorage","setItem","JSON","stringify","authSlice","name","reducers","reset","state","loggedOut","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","selectAuth","auth","logoutUser","dispatch","removeItem","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SACIC,QADJ,EAEIC,KAFJ,CAGI;AAHJ,OAIO,WAJP;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,MAAMC,YAAY,GAAG;AACjB;AACAC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,EAHQ;AAIjB;AACAC,EAAAA,SAAS,EAAE,KALM;AAMjBC,EAAAA,SAAS,EAAE,KANM;AAOjBC,EAAAA,OAAO,EAAE;AAPQ,CAArB;AAUA,OAAO,MAAMC,YAAY,GAAGV,gBAAgB,CACxC,mBADwC,EAExC,OAAOW,QAAP,EAAiBC,QAAjB,KAA8B;AAC1B,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACS,QAAD,CAA/B,CADA,CAEA;;AACA,WAAOE,QAAQ,CAACC,IAAT,CAAcR,OAArB,CAHA,CAG6B;AAChC,GAJD,CAIE,OAAOS,KAAP,EAAc;AACZ;AACA;AACA;AACA,UAAMT,OAAO,GAAGS,KAAK,CAACF,QAAN,CAAeC,IAAf,CAAoBR,OAApB,IAA+BS,KAAK,CAACT,OAArC,IAAgDS,KAAK,CAACC,QAAN,EAAhE;AACA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBX,OAAzB,CAAP;AACH;AACJ,CAduC,CAArC;AAiBP,OAAO,MAAMY,SAAS,GAAGlB,gBAAgB,CACrC,gBADqC,EAErC,OAAOW,QAAP,EAAiBC,QAAjB,KAA8B;AAC1B,MAAI;AACA,UAAMO,GAAG,GAAG,MAAMhB,KAAK,CAACQ,QAAD,CAAvB,CADA,CAEA;;AACA;;AACAS,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,GAAG,CAACL,IAAnB,CAA7B;AACA;;AACA,WAAOK,GAAG,CAACL,IAAX,CANA,CAMgB;AACnB,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMT,OAAO,GAAGS,KAAK,CAACF,QAAN,CAAeC,IAAf,CAAoBR,OAApB,IAA+BS,KAAK,CAACT,OAArC,IAAgDS,KAAK,CAACC,QAAN,EAAhE;AACA,WAAOJ,QAAQ,CAACK,eAAT,CAAyBX,OAAzB,CAAP;AACH;AACJ,CAdoC,CAAlC;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMkB,SAAS,GAAGvB,WAAW,CAAC;AACjCwB,EAAAA,IAAI,EAAE,MAD2B;AAEjCrB,EAAAA,YAFiC;AAGjCsB,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAEC,KAAK,IAAI;AACZA,MAAAA,KAAK,CAACtB,OAAN,GAAgB,EAAhB,CADY,CAEZ;;AACAsB,MAAAA,KAAK,CAACnB,OAAN,GAAgB,KAAhB;AACAmB,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACH,KAPK;;AAQN;AACAqB,IAAAA,SAAS,EAAED,KAAK,IAAI;AAChBA,MAAAA,KAAK,CAACvB,IAAN,GAAa,IAAb,CADgB,CACE;AACrB;AAXK,GAHuB;AAgBjCyB,EAAAA,aAAa,EAAEC,OAAO,IAAI;AACtBA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,YAAY,CAACuB,OAA7B,EAAsCL,KAAK,IAAI;AACvC;AACAA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACH,KAHL,EAGOyB,OAHP,CAGetB,YAAY,CAACwB,SAH5B,EAGuC,CAACN,KAAD,EAAQO,MAAR,KAAmB;AAClDP,MAAAA,KAAK,CAACtB,OAAN,GAAgB6B,MAAM,CAACC,OAAvB,CADkD,CAElD;;AACAR,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACH,KARL,EAQOwB,OARP,CAQetB,YAAY,CAAC2B,QAR5B,EAQsC,CAACT,KAAD,EAAQO,MAAR,KAAmB;AACjDP,MAAAA,KAAK,CAACtB,OAAN,GAAgB6B,MAAM,CAACC,OAAvB,CADiD,CAEjD;;AACAR,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACnB,OAAN,GAAgB,IAAhB;AACH,KAbL;AAcAsB,IAAAA,OAAO,CAACC,OAAR,CAAgBd,SAAS,CAACe,OAA1B,EAAmCL,KAAK,IAAI;AACpC;AACAA,MAAAA,KAAK,CAACrB,SAAN,GAAkB,IAAlB;AACH,KAHL,EAGOyB,OAHP,CAGed,SAAS,CAACgB,SAHzB,EAGoC,CAACN,KAAD,EAAQO,MAAR,KAAmB;AAC/CP,MAAAA,KAAK,CAACvB,IAAN,GAAa8B,MAAM,CAACC,OAApB,CAD+C,CACnB;AAC5B;;AACAR,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACH,KARL,EAQOwB,OARP,CAQed,SAAS,CAACmB,QARzB,EAQmC,CAACT,KAAD,EAAQO,MAAR,KAAmB;AAC9CP,MAAAA,KAAK,CAACtB,OAAN,GAAgB6B,MAAM,CAACC,OAAvB,CAD8C,CAE9C;;AACAR,MAAAA,KAAK,CAACrB,SAAN,GAAkB,KAAlB;AACAqB,MAAAA,KAAK,CAACnB,OAAN,GAAgB,IAAhB;AACH,KAbL;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACH;AAlEgC,CAAD,CAA7B;AAqEP,OAAO,MAAM;AAAEkB,EAAAA,KAAF;AAASE,EAAAA;AAAT,IAAuBL,SAAS,CAACc,OAAvC;AAEP,OAAO,MAAMC,UAAU,GAAGX,KAAK,IAAIA,KAAK,CAACY,IAAlC;AAEP;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAOC,QAAD,IAAc;AAC1CA,EAAAA,QAAQ,CAACb,SAAS,EAAV,CAAR;AACA;;AACAT,EAAAA,YAAY,CAACuB,UAAb,CAAwB,MAAxB;AACA;AACA;;AACA;AACH,CAPM;AASP,eAAenB,SAAS,CAACoB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { \n    register, \n    login, \n    // logout \n} from './authAPI'\n\n/**\n * 'window.localStorage' stores data(ex. user's token) as a <string> in browser.\n * - localStorage.setItem()\n * - localStorage.getItem()\n * - localStorage.removeItem()\n * - localStorage.clear()\n */\n// const user = JSON.parse(localStorage.getItem('user')) // ???\n/******************************************************/\n\nconst initialState = {\n    // user: user ? user : null,\n    user: null,\n    message: '',\n    // status: 'idle' || 'loading' || 'success' || 'error'\n    isLoading: false,\n    isSuccess: false,\n    isError: false\n}\n\nexport const registerUser = createAsyncThunk(\n    'auth/registerUser',\n    async (userData, thunkAPI) => {\n        try {\n            const response = await register(userData)\n            // console.log(response)\n            return response.data.message // return <Payload>\n        } catch (error) {\n            // console.log(error.response.data.message)\n            // console.log(error.message)\n            // console.log(error.toString())\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\nexport const loginUser = createAsyncThunk(\n    'auth/loginUser',\n    async (userData, thunkAPI) => {\n        try {\n            const res = await login(userData)\n            // console.log(res)\n            /*****************************************************/\n            localStorage.setItem('user', JSON.stringify(res.data))\n            /*****************************************************/\n            return res.data // return <Payload>\n        } catch (error) {\n            const message = error.response.data.message || error.message || error.toString()\n            return thunkAPI.rejectWithValue(message)\n        }\n    }\n)\n\n/* Solution1: Failed */\n// export const logoutUser = createAsyncThunk(\n//     'auth/logoutUser',\n//     async (_, thunkAPI) => {\n//         try {\n//             const res = await logout()\n//             // console.log(res)\n//             /******************************/\n//             localStorage.removeItem('user')\n//             /* OR */\n//             // localStorage.clear()\n//             /******************************/\n//             return res.data.message // return <Payload>\n//         } catch (error) {\n//             const message = error.response.data.message || error.message || error.toString()\n//             return thunkAPI.rejectWithValue(message)\n//         }\n//     }\n// )\n///////////////////////////////////////////////\n/* Solution2 */\n// export const logoutUser = createAsyncThunk(\n//     'auth/logoutUser',\n//     async () => {\n//         await logout()\n//     }\n// )\n\nexport const authSlice = createSlice({\n    name: 'auth',\n    initialState,\n    reducers: {\n        reset: state => {\n            state.message = ''\n            // status: 'idle' || 'loading' || 'success' || 'error'\n            state.isError = false\n            state.isLoading = false\n            state.isSuccess = false\n        },\n        /* Solution3 */\n        loggedOut: state => {\n            state.user = null // !!!\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(registerUser.pending, state => {\n                // state.status = 'loading'\n                state.isLoading = true\n            }).addCase(registerUser.fulfilled, (state, action) => {\n                state.message = action.payload\n                // state.status = 'success'\n                state.isLoading = false\n                state.isSuccess = true\n            }).addCase(registerUser.rejected, (state, action) => {\n                state.message = action.payload\n                // state.status = 'error'\n                state.isLoading = false\n                state.isError = true\n            })\n        builder.addCase(loginUser.pending, state => {\n                // state.status = 'loading'\n                state.isLoading = true\n            }).addCase(loginUser.fulfilled, (state, action) => {\n                state.user = action.payload // !!!\n                // state.status = 'success'\n                state.isLoading = false\n                state.isSuccess = true\n            }).addCase(loginUser.rejected, (state, action) => {\n                state.message = action.payload\n                // state.status = 'error'\n                state.isLoading = false\n                state.isError = true\n            })\n        /* Solution1: Failed */\n        // builder.addCase(logoutUser.pending, state => {\n        //         // state.status = 'loading'\n        //         state.isLoading = true\n        //     }).addCase(logoutUser.fulfilled, (state, action) => {\n        //         state.user = null // !!!\n        //         state.message = action.payload\n        //         // state.status = 'success'\n        //         state.isLoading = false\n        //         state.isSuccess = true\n        //     }).addCase(logoutUser.rejected, (state, action) => {\n        //         state.message = action.payload            \n        //         // state.status = 'error'\n        //         state.isLoading = false\n        //         state.isError = true\n        //     })\n        ///////////////////////////////////////////////////////////\n        /* Solution2 */\n        // builder.addCase(logoutUser.fulfilled, state => { \n        //         state.user = null // !!!\n        //     })\n    }\n})\n\nexport const { reset, loggedOut } = authSlice.actions\n\nexport const selectAuth = state => state.auth\n\n/* Solution3 */\nexport const logoutUser = () => (dispatch) => {\n    dispatch(loggedOut())\n    /******************************/\n    localStorage.removeItem('user')\n    /* OR */\n    // localStorage.clear()\n    /******************************/\n}\n\nexport default authSlice.reducer"]},"metadata":{},"sourceType":"module"}